import ROOT
from ROOT import *
import os
from array import array
import math
from math import *
import sys
import glob
import csv
import ctypes
from ctypes import *
import XRootD
from pyxrootd import client
import numpy as np

#from future import division
def FindAndSetMax(*args):
        if len(args) == 1: args = args[0]
        maximum = 0.0
        for i in args:
                i.SetStats(0)
                t = i.GetMaximum()
                if t > maximum:
                        maximum = t
        for j in args:
                j.GetYaxis().SetRangeUser(1,maximum*1.35)#should be 1.35 (below as well)
                j.SetLineWidth(2)
        return maximum*1.35
class drawRData:
	def __init__(self, name, sfile1, bfile1, t, o, low, high):
		gROOT.SetBatch(True)

		ofile = ROOT.TFile("/home/akobert/CMSSW_11_1_0_pre7/src/RData/NanoTool_UL_draw/SRootB_2016APV/Xqq/"+o,"RECREATE")

		#Signal files
		self.f = TFile.Open(sfile1, "READ")
		self.f.ls();

#		self.h1_10 = self.f.Get("softdrop_xqq10")
#		self.h1_15 = self.f.Get("softdrop_xqq15")
#		self.h1_20 = self.f.Get("softdrop_xqq20")
#		self.h1_25 = self.f.Get("softdrop_xqq25")
#		self.h1_30 = self.f.Get("softdrop_xqq30")
#		self.h1_35 = self.f.Get("softdrop_xqq35")
#		self.h1_40 = self.f.Get("softdrop_xqq40")
#		self.h1_45 = self.f.Get("softdrop_xqq45")
#		self.h1_50 = self.f.Get("softdrop_xqq50")
#		self.h1_55 = self.f.Get("softdrop_xqq55")
#		self.h1_60 = self.f.Get("softdrop_xqq60")
#		self.h1_65 = self.f.Get("softdrop_xqq65")
#		self.h1_70 = self.f.Get("softdrop_xqq70")
#		self.h1_75 = self.f.Get("softdrop_xqq75")
		self.h1_80 = self.f.Get("softdrop_xqq80")
		self.h1_85 = self.f.Get("softdrop_xqq85")
		self.h1_90 = self.f.Get("softdrop_xqq90")
		self.h1_91 = self.f.Get("softdrop_xqq91")
		self.h1_92 = self.f.Get("softdrop_xqq92")
		self.h1_93 = self.f.Get("softdrop_xqq93")
		self.h1_94 = self.f.Get("softdrop_xqq94")
		self.h1_95 = self.f.Get("softdrop_xqq95")
		self.h1_96 = self.f.Get("softdrop_xqq96")
		self.h1_97 = self.f.Get("softdrop_xqq97")
		self.h1_98 = self.f.Get("softdrop_xqq98")
		self.h1_99 = self.f.Get("softdrop_xqq99")
		
#		self.h2_10 = self.f.Get("softdrop_AllQQ10")
#		self.h2_15 = self.f.Get("softdrop_AllQQ15")
#		self.h2_20 = self.f.Get("softdrop_AllQQ20")
#		self.h2_25 = self.f.Get("softdrop_AllQQ25")
#		self.h2_30 = self.f.Get("softdrop_AllQQ30")
#		self.h2_35 = self.f.Get("softdrop_AllQQ35")
#		self.h2_40 = self.f.Get("softdrop_AllQQ40")
#		self.h2_45 = self.f.Get("softdrop_AllQQ45")
#		self.h2_50 = self.f.Get("softdrop_AllQQ50")
#		self.h2_55 = self.f.Get("softdrop_AllQQ55")
#		self.h2_60 = self.f.Get("softdrop_AllQQ60")
#		self.h2_65 = self.f.Get("softdrop_AllQQ65")
#		self.h2_70 = self.f.Get("softdrop_AllQQ70")
#		self.h2_75 = self.f.Get("softdrop_AllQQ75")
		self.h2_80 = self.f.Get("softdrop_AllQQ80")
		self.h2_85 = self.f.Get("softdrop_AllQQ85")
		self.h2_90 = self.f.Get("softdrop_AllQQ90")
		self.h2_91 = self.f.Get("softdrop_AllQQ91")
		self.h2_92 = self.f.Get("softdrop_AllQQ92")
		self.h2_93 = self.f.Get("softdrop_AllQQ93")
		self.h2_94 = self.f.Get("softdrop_AllQQ94")
		self.h2_95 = self.f.Get("softdrop_AllQQ95")
		self.h2_96 = self.f.Get("softdrop_AllQQ96")
		self.h2_97 = self.f.Get("softdrop_AllQQ97")
		self.h2_98 = self.f.Get("softdrop_AllQQ98")
		self.h2_99 = self.f.Get("softdrop_AllQQ99")

		
		self.bf = TFile.Open(bfile1, "READ")
		self.bf.ls();

#		self.b1_10 = self.bf.Get("softdrop_xqq10")
#		self.b1_15 = self.bf.Get("softdrop_xqq15")
#		self.b1_20 = self.bf.Get("softdrop_xqq20")
#		self.b1_25 = self.bf.Get("softdrop_xqq25")
#		self.b1_30 = self.bf.Get("softdrop_xqq30")
#		self.b1_35 = self.bf.Get("softdrop_xqq35")
#		self.b1_40 = self.bf.Get("softdrop_xqq40")
#		self.b1_45 = self.bf.Get("softdrop_xqq45")
#		self.b1_50 = self.bf.Get("softdrop_xqq50")
#		self.b1_55 = self.bf.Get("softdrop_xqq55")
#		self.b1_60 = self.bf.Get("softdrop_xqq60")
#		self.b1_65 = self.bf.Get("softdrop_xqq65")
#		self.b1_70 = self.bf.Get("softdrop_xqq70")
#		self.b1_75 = self.bf.Get("softdrop_xqq75")
		self.b1_80 = self.bf.Get("softdrop_xqq80")
		self.b1_85 = self.bf.Get("softdrop_xqq85")
		self.b1_90 = self.bf.Get("softdrop_xqq90")
		self.b1_91 = self.bf.Get("softdrop_xqq91")
		self.b1_92 = self.bf.Get("softdrop_xqq92")
		self.b1_93 = self.bf.Get("softdrop_xqq93")
		self.b1_94 = self.bf.Get("softdrop_xqq94")
		self.b1_95 = self.bf.Get("softdrop_xqq95")
		self.b1_96 = self.bf.Get("softdrop_xqq96")
		self.b1_97 = self.bf.Get("softdrop_xqq97")
		self.b1_98 = self.bf.Get("softdrop_xqq98")
		self.b1_99 = self.bf.Get("softdrop_xqq99")
		
#		self.b2_10 = self.bf.Get("softdrop_AllQQ10")
#		self.b2_15 = self.bf.Get("softdrop_AllQQ15")
#		self.b2_20 = self.bf.Get("softdrop_AllQQ20")
#		self.b2_25 = self.bf.Get("softdrop_AllQQ25")
#		self.b2_30 = self.bf.Get("softdrop_AllQQ30")
#		self.b2_35 = self.bf.Get("softdrop_AllQQ35")
#		self.b2_40 = self.bf.Get("softdrop_AllQQ40")
#		self.b2_45 = self.bf.Get("softdrop_AllQQ45")
#		self.b2_50 = self.bf.Get("softdrop_AllQQ50")
#		self.b2_55 = self.bf.Get("softdrop_AllQQ55")
#		self.b2_60 = self.bf.Get("softdrop_AllQQ60")
#		self.b2_65 = self.bf.Get("softdrop_AllQQ65")
#		self.b2_70 = self.bf.Get("softdrop_AllQQ70")
#		self.b2_75 = self.bf.Get("softdrop_AllQQ75")
		self.b2_80 = self.bf.Get("softdrop_AllQQ80")
		self.b2_85 = self.bf.Get("softdrop_AllQQ85")
		self.b2_90 = self.bf.Get("softdrop_AllQQ90")
		self.b2_91 = self.bf.Get("softdrop_AllQQ91")
		self.b2_92 = self.bf.Get("softdrop_AllQQ92")
		self.b2_93 = self.bf.Get("softdrop_AllQQ93")
		self.b2_94 = self.bf.Get("softdrop_AllQQ94")
		self.b2_95 = self.bf.Get("softdrop_AllQQ95")
		self.b2_96 = self.bf.Get("softdrop_AllQQ96")
		self.b2_97 = self.bf.Get("softdrop_AllQQ97")
		self.b2_98 = self.bf.Get("softdrop_AllQQ98")
		self.b2_99 = self.bf.Get("softdrop_AllQQ99")

		
		sig_low = self.b1_90.GetXaxis().FindBin(low)
		sig_high = self.b1_90.GetXaxis().FindBin(high)

	
#		self.b1_10.SetLineColor(kRed)
#		self.b1_15.SetLineColor(kRed)
#		self.b1_20.SetLineColor(kRed)
#		self.b1_25.SetLineColor(kRed)
#		self.b1_30.SetLineColor(kRed)
#		self.b1_35.SetLineColor(kRed)
#		self.b1_40.SetLineColor(kRed)
#		self.b1_45.SetLineColor(kRed)
#		self.b1_50.SetLineColor(kRed)
#		self.b1_55.SetLineColor(kRed)
#		self.b1_60.SetLineColor(kRed)
#		self.b1_65.SetLineColor(kRed)
#		self.b1_70.SetLineColor(kRed)
#		self.b1_75.SetLineColor(kRed)
		self.b1_80.SetLineColor(kRed)
		self.b1_85.SetLineColor(kRed)
		self.b1_90.SetLineColor(kRed)
		self.b1_91.SetLineColor(kRed)
		self.b1_92.SetLineColor(kRed)
		self.b1_93.SetLineColor(kRed)
		self.b1_94.SetLineColor(kRed)
		self.b1_95.SetLineColor(kRed)
		self.b1_96.SetLineColor(kRed)
		self.b1_97.SetLineColor(kRed)
		self.b1_98.SetLineColor(kRed)
		self.b1_99.SetLineColor(kRed)
		
#		self.b2_10.SetLineColor(kRed)
#		self.b2_15.SetLineColor(kRed)
#		self.b2_20.SetLineColor(kRed)
#		self.b2_25.SetLineColor(kRed)
#		self.b2_30.SetLineColor(kRed)
#		self.b2_35.SetLineColor(kRed)
#		self.b2_40.SetLineColor(kRed)
#		self.b2_45.SetLineColor(kRed)
#		self.b2_50.SetLineColor(kRed)
#		self.b2_55.SetLineColor(kRed)
#		self.b2_60.SetLineColor(kRed)
#		self.b2_65.SetLineColor(kRed)
#		self.b2_70.SetLineColor(kRed)
#		self.b2_75.SetLineColor(kRed)
		self.b2_80.SetLineColor(kRed)
		self.b2_85.SetLineColor(kRed)
		self.b2_90.SetLineColor(kRed)
		self.b2_91.SetLineColor(kRed)
		self.b2_92.SetLineColor(kRed)
		self.b2_93.SetLineColor(kRed)
		self.b2_94.SetLineColor(kRed)
		self.b2_95.SetLineColor(kRed)
		self.b2_96.SetLineColor(kRed)
		self.b2_97.SetLineColor(kRed)
		self.b2_98.SetLineColor(kRed)
		self.b2_99.SetLineColor(kRed)
	
			
		
#		FindAndSetMax(self.b1_10, self.h1_10)
#		FindAndSetMax(self.b1_15, self.h1_15)
#		FindAndSetMax(self.b1_20, self.h1_20)
#		FindAndSetMax(self.b1_25, self.h1_25)
#		FindAndSetMax(self.b1_30, self.h1_30)
#		FindAndSetMax(self.b1_35, self.h1_35)
#		FindAndSetMax(self.b1_40, self.h1_40)
#		FindAndSetMax(self.b1_45, self.h1_45)
#		FindAndSetMax(self.b1_50, self.h1_50)
#		FindAndSetMax(self.b1_55, self.h1_55)
#		FindAndSetMax(self.b1_60, self.h1_60)
#		FindAndSetMax(self.b1_65, self.h1_65)
#		FindAndSetMax(self.b1_70, self.h1_70)
#		FindAndSetMax(self.b1_75, self.h1_75)
		FindAndSetMax(self.b1_80, self.h1_80)
		FindAndSetMax(self.b1_85, self.h1_85)
		FindAndSetMax(self.b1_90, self.h1_90)
		FindAndSetMax(self.b1_91, self.h1_91)
		FindAndSetMax(self.b1_92, self.h1_92)
		FindAndSetMax(self.b1_93, self.h1_93)
		FindAndSetMax(self.b1_94, self.h1_94)
		FindAndSetMax(self.b1_95, self.h1_95)
		FindAndSetMax(self.b1_96, self.h1_96)
		FindAndSetMax(self.b1_97, self.h1_97)
		FindAndSetMax(self.b1_98, self.h1_98)
		FindAndSetMax(self.b1_99, self.h1_99)
		
#		FindAndSetMax(self.b2_10, self.h2_10)
#		FindAndSetMax(self.b2_15, self.h2_15)
#		FindAndSetMax(self.b2_20, self.h2_20)
#		FindAndSetMax(self.b2_25, self.h2_25)
#		FindAndSetMax(self.b2_30, self.h2_30)
#		FindAndSetMax(self.b2_35, self.h2_35)
#		FindAndSetMax(self.b2_40, self.h2_40)
#		FindAndSetMax(self.b2_45, self.h2_45)
#		FindAndSetMax(self.b2_50, self.h2_50)
#		FindAndSetMax(self.b2_55, self.h2_55)
#		FindAndSetMax(self.b2_60, self.h2_60)
#		FindAndSetMax(self.b2_65, self.h2_65)
#		FindAndSetMax(self.b2_70, self.h2_70)
#		FindAndSetMax(self.b2_75, self.h2_75)
		FindAndSetMax(self.b2_80, self.h2_80)
		FindAndSetMax(self.b2_85, self.h2_85)
		FindAndSetMax(self.b2_90, self.h2_90)
		FindAndSetMax(self.b2_91, self.h2_91)
		FindAndSetMax(self.b2_92, self.h2_92)
		FindAndSetMax(self.b2_93, self.h2_93)
		FindAndSetMax(self.b2_94, self.h2_94)
		FindAndSetMax(self.b2_95, self.h2_95)
		FindAndSetMax(self.b2_96, self.h2_96)
		FindAndSetMax(self.b2_97, self.h2_97)
		FindAndSetMax(self.b2_98, self.h2_98)
		FindAndSetMax(self.b2_99, self.h2_99)

#		S10 = self.h1_10.Integral(sig_low, sig_high)
#		S15 = self.h1_15.Integral(sig_low, sig_high)
#		S20 = self.h1_20.Integral(sig_low, sig_high)
#		S25 = self.h1_25.Integral(sig_low, sig_high)
#		S30 = self.h1_30.Integral(sig_low, sig_high)
#		S35 = self.h1_35.Integral(sig_low, sig_high)
#		S40 = self.h1_40.Integral(sig_low, sig_high)
#		S45 = self.h1_45.Integral(sig_low, sig_high)
#		S50 = self.h1_50.Integral(sig_low, sig_high)
#		S55 = self.h1_55.Integral(sig_low, sig_high)
#		S60 = self.h1_60.Integral(sig_low, sig_high)
#		S65 = self.h1_65.Integral(sig_low, sig_high)
#		S70 = self.h1_70.Integral(sig_low, sig_high)
#		S75 = self.h1_75.Integral(sig_low, sig_high)
		S80 = self.h1_80.Integral(sig_low, sig_high)
		S85 = self.h1_85.Integral(sig_low, sig_high)
		S90 = self.h1_90.Integral(sig_low, sig_high)
		S91 = self.h1_91.Integral(sig_low, sig_high)
		S92 = self.h1_92.Integral(sig_low, sig_high)
		S93 = self.h1_93.Integral(sig_low, sig_high)
		S94 = self.h1_94.Integral(sig_low, sig_high)
		S95 = self.h1_95.Integral(sig_low, sig_high)
		S96 = self.h1_96.Integral(sig_low, sig_high)
		S97 = self.h1_97.Integral(sig_low, sig_high)
		S98 = self.h1_98.Integral(sig_low, sig_high)
		S99 = self.h1_99.Integral(sig_low, sig_high)
		
#		B10 = self.b1_10.Integral(sig_low, sig_high)
#		B15 = self.b1_15.Integral(sig_low, sig_high)
#		B20 = self.b1_20.Integral(sig_low, sig_high)
#		B25 = self.b1_25.Integral(sig_low, sig_high)
#		B30 = self.b1_30.Integral(sig_low, sig_high)
#		B35 = self.b1_35.Integral(sig_low, sig_high)
#		B40 = self.b1_40.Integral(sig_low, sig_high)
#		B45 = self.b1_45.Integral(sig_low, sig_high)
#		B50 = self.b1_50.Integral(sig_low, sig_high)
#		B55 = self.b1_55.Integral(sig_low, sig_high)
#		B60 = self.b1_60.Integral(sig_low, sig_high)
#		B65 = self.b1_65.Integral(sig_low, sig_high)
#		B70 = self.b1_70.Integral(sig_low, sig_high)
#		B75 = self.b1_75.Integral(sig_low, sig_high)
		B80 = self.b1_80.Integral(sig_low, sig_high)
		B85 = self.b1_85.Integral(sig_low, sig_high)
		B90 = self.b1_90.Integral(sig_low, sig_high)
		B91 = self.b1_91.Integral(sig_low, sig_high)
		B92 = self.b1_92.Integral(sig_low, sig_high)
		B93 = self.b1_93.Integral(sig_low, sig_high)
		B94 = self.b1_94.Integral(sig_low, sig_high)
		B95 = self.b1_95.Integral(sig_low, sig_high)
		B96 = self.b1_96.Integral(sig_low, sig_high)
		B97 = self.b1_97.Integral(sig_low, sig_high)
		B98 = self.b1_98.Integral(sig_low, sig_high)
		B99 = self.b1_99.Integral(sig_low, sig_high)
		

#		SRB10 = S10/sqrt(B10)
#		SRB15 = S15/sqrt(B15)
#		SRB20 = S20/sqrt(B20)
#		SRB25 = S25/sqrt(B25)
#		SRB30 = S30/sqrt(B30)
#		SRB35 = S35/sqrt(B35)
#		SRB40 = S40/sqrt(B40)
#		SRB45 = S45/sqrt(B45)
#		SRB50 = S50/sqrt(B50)
#		SRB55 = S55/sqrt(B55)
#		SRB60 = S60/sqrt(B60)
#		SRB65 = S65/sqrt(B65)
#		SRB70 = S70/sqrt(B70)
#		SRB75 = S75/sqrt(B75)
		SRB80 = S80/sqrt(B80)
		SRB85 = S85/sqrt(B85)
		SRB90 = S90/sqrt(B90)
		SRB91 = S91/sqrt(B91)
		SRB92 = S92/sqrt(B92)
		SRB93 = S93/sqrt(B93)
		SRB94 = S94/sqrt(B94)
		SRB95 = S95/sqrt(B95)
		SRB96 = S96/sqrt(B96)
		SRB97 = S97/sqrt(B97)
		SRB98 = S98/sqrt(B98)
		SRB99 = S99/sqrt(B99)
		

#		print("S10: "+str(S10)+" B10: "+str(B10))
#		print("S15: "+str(S15)+" B15: "+str(B15))
#		print("S20: "+str(S20)+" B20: "+str(B20))
#		print("S25: "+str(S25)+" B25: "+str(B25))
#		print("S30: "+str(S30)+" B30: "+str(B30))
#		print("S35: "+str(S35)+" B35: "+str(B35))
#		print("S40: "+str(S40)+" B40: "+str(B40))
#		print("S45: "+str(S45)+" B45: "+str(B45))
#		print("S50: "+str(S50)+" B50: "+str(B50))
#		print("S55: "+str(S55)+" B55: "+str(B55))
#		print("S60: "+str(S60)+" B60: "+str(B60))
#		print("S65: "+str(S65)+" B65: "+str(B65))
#		print("S70: "+str(S70)+" B70: "+str(B70))
#		print("S75: "+str(S75)+" B75: "+str(B75))
		print("S80: "+str(S80)+" B80: "+str(B80))
		print("S85: "+str(S85)+" B85: "+str(B85))
		print("S90: "+str(S90)+" B90: "+str(B90))
		print("S91: "+str(S91)+" B91: "+str(B91))
		print("S92: "+str(S92)+" B92: "+str(B92))
		print("S93: "+str(S93)+" B93: "+str(B93))
		print("S94: "+str(S94)+" B94: "+str(B94))
		print("S95: "+str(S95)+" B95: "+str(B95))
		print("S96: "+str(S96)+" B96: "+str(B96))
		print("S97: "+str(S97)+" B97: "+str(B97))
		print("S98: "+str(S98)+" B98: "+str(B98))
		print("S99: "+str(S99)+" B99: "+str(B99))
	
#		SALL10 = self.h2_10.Integral(sig_low, sig_high)
#		SALL15 = self.h2_15.Integral(sig_low, sig_high)
#		SALL20 = self.h2_20.Integral(sig_low, sig_high)
#		SALL25 = self.h2_25.Integral(sig_low, sig_high)
#		SALL30 = self.h2_30.Integral(sig_low, sig_high)
#		SALL35 = self.h2_35.Integral(sig_low, sig_high)
#		SALL40 = self.h2_40.Integral(sig_low, sig_high)
#		SALL45 = self.h2_45.Integral(sig_low, sig_high)
#		SALL50 = self.h2_50.Integral(sig_low, sig_high)
#		SALL55 = self.h2_55.Integral(sig_low, sig_high)
#		SALL60 = self.h2_60.Integral(sig_low, sig_high)
#		SALL65 = self.h2_65.Integral(sig_low, sig_high)
#		SALL70 = self.h2_70.Integral(sig_low, sig_high)
#		SALL75 = self.h2_75.Integral(sig_low, sig_high)
		SALL80 = self.h2_80.Integral(sig_low, sig_high)
		SALL85 = self.h2_85.Integral(sig_low, sig_high)
		SALL90 = self.h2_90.Integral(sig_low, sig_high)
		SALL91 = self.h2_91.Integral(sig_low, sig_high)
		SALL92 = self.h2_92.Integral(sig_low, sig_high)
		SALL93 = self.h2_93.Integral(sig_low, sig_high)
		SALL94 = self.h2_94.Integral(sig_low, sig_high)
		SALL95 = self.h2_95.Integral(sig_low, sig_high)
		SALL96 = self.h2_96.Integral(sig_low, sig_high)
		SALL97 = self.h2_97.Integral(sig_low, sig_high)
		SALL98 = self.h2_98.Integral(sig_low, sig_high)
		SALL99 = self.h2_99.Integral(sig_low, sig_high)
		
#		BALL10 = self.b2_10.Integral(sig_low, sig_high)
#		BALL15 = self.b2_15.Integral(sig_low, sig_high)
#		BALL20 = self.b2_20.Integral(sig_low, sig_high)
#		BALL25 = self.b2_25.Integral(sig_low, sig_high)
#		BALL30 = self.b2_30.Integral(sig_low, sig_high)
#		BALL35 = self.b2_35.Integral(sig_low, sig_high)
#		BALL40 = self.b2_40.Integral(sig_low, sig_high)
#		BALL45 = self.b2_45.Integral(sig_low, sig_high)
#		BALL50 = self.b2_50.Integral(sig_low, sig_high)
#		BALL55 = self.b2_55.Integral(sig_low, sig_high)
#		BALL60 = self.b2_60.Integral(sig_low, sig_high)
#		BALL65 = self.b2_65.Integral(sig_low, sig_high)
#		BALL70 = self.b2_70.Integral(sig_low, sig_high)
#		BALL75 = self.b2_75.Integral(sig_low, sig_high)
		BALL80 = self.b2_80.Integral(sig_low, sig_high)
		BALL85 = self.b2_85.Integral(sig_low, sig_high)
		BALL90 = self.b2_90.Integral(sig_low, sig_high)
		BALL91 = self.b2_91.Integral(sig_low, sig_high)
		BALL92 = self.b2_92.Integral(sig_low, sig_high)
		BALL93 = self.b2_93.Integral(sig_low, sig_high)
		BALL94 = self.b2_94.Integral(sig_low, sig_high)
		BALL95 = self.b2_95.Integral(sig_low, sig_high)
		BALL96 = self.b2_96.Integral(sig_low, sig_high)
		BALL97 = self.b2_97.Integral(sig_low, sig_high)
		BALL98 = self.b2_98.Integral(sig_low, sig_high)
		BALL99 = self.b2_99.Integral(sig_low, sig_high)
		

#		SRBALL10 = SALL10/sqrt(BALL10)
#		SRBALL15 = SALL15/sqrt(BALL15)
#		SRBALL20 = SALL20/sqrt(BALL20)
#		SRBALL25 = SALL25/sqrt(BALL25)
#		SRBALL30 = SALL30/sqrt(BALL30)
#		SRBALL35 = SALL35/sqrt(BALL35)
#		SRBALL40 = SALL40/sqrt(BALL40)
#		SRBALL45 = SALL45/sqrt(BALL45)
#		SRBALL50 = SALL50/sqrt(BALL50)
#		SRBALL55 = SALL55/sqrt(BALL55)
#		SRBALL60 = SALL60/sqrt(BALL60)
#		SRBALL65 = SALL65/sqrt(BALL65)
#		SRBALL70 = SALL70/sqrt(BALL70)
#		SRBALL75 = SALL75/sqrt(BALL75)
		SRBALL80 = SALL80/sqrt(BALL80)
		SRBALL85 = SALL85/sqrt(BALL85)
		SRBALL90 = SALL90/sqrt(BALL90)
		SRBALL91 = SALL91/sqrt(BALL91)
		SRBALL92 = SALL92/sqrt(BALL92)
		SRBALL93 = SALL93/sqrt(BALL93)
		SRBALL94 = SALL94/sqrt(BALL94)
		SRBALL95 = SALL95/sqrt(BALL95)
		SRBALL96 = SALL96/sqrt(BALL96)
		SRBALL97 = SALL97/sqrt(BALL97)
		SRBALL98 = SALL98/sqrt(BALL98)
		SRBALL99 = SALL99/sqrt(BALL99)
		

#		print("SALL10: "+str(SALL10)+" BALL10: "+str(BALL10))
#		print("SALL15: "+str(SALL15)+" BALL15: "+str(BALL15))
#		print("SALL20: "+str(SALL20)+" BALL20: "+str(BALL20))
#		print("SALL25: "+str(SALL25)+" BALL25: "+str(BALL25))
#		print("SALL30: "+str(SALL30)+" BALL30: "+str(BALL30))
#		print("SALL35: "+str(SALL35)+" BALL35: "+str(BALL35))
#		print("SALL40: "+str(SALL40)+" BALL40: "+str(BALL40))
#		print("SALL45: "+str(SALL45)+" BALL45: "+str(BALL45))
#		print("SALL50: "+str(SALL50)+" BALL50: "+str(BALL50))
#		print("SALL55: "+str(SALL55)+" BALL55: "+str(BALL55))
#		print("SALL60: "+str(SALL60)+" BALL60: "+str(BALL60))
#		print("SALL65: "+str(SALL65)+" BALL65: "+str(BALL65))
#		print("SALL70: "+str(SALL70)+" BALL70: "+str(BALL70))
#		print("SALL75: "+str(SALL75)+" BALL75: "+str(BALL75))
		print("SALL80: "+str(SALL80)+" BALL80: "+str(BALL80))
		print("SALL85: "+str(SALL85)+" BALL85: "+str(BALL85))
		print("SALL90: "+str(SALL90)+" BALL90: "+str(BALL90))
		print("SALL91: "+str(SALL91)+" BALL91: "+str(BALL91))
		print("SALL92: "+str(SALL92)+" BALL92: "+str(BALL92))
		print("SALL93: "+str(SALL93)+" BALL93: "+str(BALL93))
		print("SALL94: "+str(SALL94)+" BALL94: "+str(BALL94))
		print("SALL95: "+str(SALL95)+" BALL95: "+str(BALL95))
		print("SALL96: "+str(SALL96)+" BALL96: "+str(BALL96))
		print("SALL97: "+str(SALL97)+" BALL97: "+str(BALL97))
		print("SALL98: "+str(SALL98)+" BALL98: "+str(BALL98))
		print("SALL99: "+str(SALL99)+" BALL99: "+str(BALL99))
	

		ROOT.gStyle.SetOptStat(0)


		c80 = TCanvas()
		c80.cd()
                gPad.SetLogy()
		self.b1_80.SetTitle(name+" S/Root(B) >.80 Xqq")
		self.b1_80.Draw("hist")
		self.h1_80.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_80.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_80.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_80, name+" Signal")
                l1.AddEntry(self.b1_80, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB80))
                t1.DrawTextNDC(.4, .55, "S = "+str(S80))
                t1.DrawTextNDC(.4, .45, "B = "+str(B80))
                gPad.Update()
		c80.SaveAs("./plots/SRootB_2016APV_"+name+"_80_Xqq.png")
		c80.Close()

		c85 = TCanvas()
		c85.cd()
                gPad.SetLogy()
		self.b1_85.SetTitle(name+" S/Root(B) >.85 Xqq")
		self.b1_85.Draw("hist")
		self.h1_85.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_85.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_85.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_85, name+" Signal")
                l1.AddEntry(self.b1_85, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB85))
                t1.DrawTextNDC(.4, .55, "S = "+str(S85))
                t1.DrawTextNDC(.4, .45, "B = "+str(B85))
                gPad.Update()
		c85.SaveAs("./plots/SRootB_2016APV_"+name+"_85_Xqq.png")
		c85.Close()

		c90 = TCanvas()
		c90.cd()
                gPad.SetLogy()
		self.b1_90.SetTitle(name+" S/Root(B) >.90 Xqq")
		self.b1_90.Draw("hist")
		self.h1_90.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_90.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_90.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_90, name+" Signal")
                l1.AddEntry(self.b1_90, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB90))
                t1.DrawTextNDC(.4, .55, "S = "+str(S90))
                t1.DrawTextNDC(.4, .45, "B = "+str(B90))
                gPad.Update()
		c90.SaveAs("./plots/SRootB_2016APV_"+name+"_90_Xqq.png")
		c90.Close()
		
		c91 = TCanvas()
		c91.cd()
                gPad.SetLogy()
		self.b1_91.SetTitle(name+" S/Root(B) >.91 Xqq")
		self.b1_91.Draw("hist")
		self.h1_91.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_91.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_91.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_91, name+" Signal")
                l1.AddEntry(self.b1_91, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB91))
                t1.DrawTextNDC(.4, .55, "S = "+str(S91))
                t1.DrawTextNDC(.4, .45, "B = "+str(B91))
                gPad.Update()
		c91.SaveAs("./plots/SRootB_2016APV_"+name+"_91_Xqq.png")
		c91.Close()
		
		c92 = TCanvas()
		c92.cd()
                gPad.SetLogy()
		self.b1_92.SetTitle(name+" S/Root(B) >.92 Xqq")
		self.b1_92.Draw("hist")
		self.h1_92.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_92.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_92.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_92, name+" Signal")
                l1.AddEntry(self.b1_92, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB92))
                t1.DrawTextNDC(.4, .55, "S = "+str(S92))
                t1.DrawTextNDC(.4, .45, "B = "+str(B92))
                gPad.Update()
		c92.SaveAs("./plots/SRootB_2016APV_"+name+"_92_Xqq.png")
		c92.Close()	
		
		c93 = TCanvas()
		c93.cd()
                gPad.SetLogy()
		self.b1_93.SetTitle(name+" S/Root(B) >.93 Xqq")
		self.b1_93.Draw("hist")
		self.h1_93.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_93.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_93.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_93, name+" Signal")
                l1.AddEntry(self.b1_93, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB93))
                t1.DrawTextNDC(.4, .55, "S = "+str(S93))
                t1.DrawTextNDC(.4, .45, "B = "+str(B93))
                gPad.Update()
		c93.SaveAs("./plots/SRootB_2016APV_"+name+"_93_Xqq.png")
		c93.Close()	
		
		c94 = TCanvas()
		c94.cd()
                gPad.SetLogy()
		self.b1_94.SetTitle(name+" S/Root(B) >.94 Xqq")
		self.b1_94.Draw("hist")
		self.h1_94.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_94.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_94.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_94, name+" Signal")
                l1.AddEntry(self.b1_94, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB94))
                t1.DrawTextNDC(.4, .55, "S = "+str(S94))
                t1.DrawTextNDC(.4, .45, "B = "+str(B94))
                gPad.Update()
		c94.SaveAs("./plots/SRootB_2016APV_"+name+"_94_Xqq.png")
		c94.Close()	
		
		c95 = TCanvas()
		c95.cd()
                gPad.SetLogy()
		self.b1_95.SetTitle(name+" S/Root(B) >.95 Xqq")
		self.b1_95.Draw("hist")
		self.h1_95.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_95.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_95.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_95, name+" Signal")
                l1.AddEntry(self.b1_95, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB95))
                t1.DrawTextNDC(.4, .55, "S = "+str(S95))
                t1.DrawTextNDC(.4, .45, "B = "+str(B95))
                gPad.Update()
		c95.SaveAs("./plots/SRootB_2016APV_"+name+"_95_Xqq.png")
		c95.Close()
		
		c96 = TCanvas()
		c96.cd()
                gPad.SetLogy()
		self.b1_96.SetTitle(name+" S/Root(B) >.96 Xqq")
		self.b1_96.Draw("hist")
		self.h1_96.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_96.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_96.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_96, name+" Signal")
                l1.AddEntry(self.b1_96, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB96))
                t1.DrawTextNDC(.4, .55, "S = "+str(S96))
                t1.DrawTextNDC(.4, .45, "B = "+str(B96))
                gPad.Update()
		c96.SaveAs("./plots/SRootB_2016APV_"+name+"_96_Xqq.png")
		c96.Close()
		
		c97 = TCanvas()
		c97.cd()
                gPad.SetLogy()
		self.b1_97.SetTitle(name+" S/Root(B) >.97 Xqq")
		self.b1_97.Draw("hist")
		self.h1_97.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_97.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_97.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_97, name+" Signal")
                l1.AddEntry(self.b1_97, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB97))
                t1.DrawTextNDC(.4, .55, "S = "+str(S97))
                t1.DrawTextNDC(.4, .45, "B = "+str(B97))
                gPad.Update()
		c97.SaveAs("./plots/SRootB_2016APV_"+name+"_97_Xqq.png")
		c97.Close()
		
		c98 = TCanvas()
		c98.cd()
                gPad.SetLogy()
		self.b1_98.SetTitle(name+" S/Root(B) >.98 Xqq")
		self.b1_98.Draw("hist")
		self.h1_98.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_98.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_98.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_98, name+" Signal")
                l1.AddEntry(self.b1_98, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB98))
                t1.DrawTextNDC(.4, .55, "S = "+str(S98))
                t1.DrawTextNDC(.4, .45, "B = "+str(B98))
                gPad.Update()
		c98.SaveAs("./plots/SRootB_2016APV_"+name+"_98_Xqq.png")
		c98.Close()
		
		c99 = TCanvas()
		c99.cd()
                gPad.SetLogy()
		self.b1_99.SetTitle(name+" S/Root(B) >.99 Xqq")
		self.b1_99.Draw("hist")
		self.h1_99.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h1_99.GetMaximum())
		lin2 = TLine(high, 1, high, self.h1_99.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h1_99, name+" Signal")
                l1.AddEntry(self.b1_99, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB99))
                t1.DrawTextNDC(.4, .55, "S = "+str(S99))
                t1.DrawTextNDC(.4, .45, "B = "+str(B99))
                gPad.Update()
		c99.SaveAs("./plots/SRootB_2016APV_"+name+"_99_Xqq.png")
		c99.Close()
		
		c_all_80 = TCanvas()
		c_all_80.cd()
                gPad.SetLogy()
		self.b2_80.SetTitle(name+" S/Root(B) >.80 AllQQ")
		self.b2_80.Draw("hist")
		self.h2_80.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_80.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_80.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_80, name+" Signal")
                l1.AddEntry(self.b2_80, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB80))
                t1.DrawTextNDC(.4, .55, "S = "+str(S80))
                t1.DrawTextNDC(.4, .45, "B = "+str(B80))
                gPad.Update()
		c_all_80.SaveAs("./plots/SRootB_2016APV_"+name+"_80_AllQQ.png")
		c_all_80.Close()

		c_all_85 = TCanvas()
		c_all_85.cd()
                gPad.SetLogy()
		self.b2_85.SetTitle(name+" S/Root(B) >.85 AllQQ")
		self.b2_85.Draw("hist")
		self.h2_85.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_85.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_85.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_85, name+" Signal")
                l1.AddEntry(self.b2_85, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB85))
                t1.DrawTextNDC(.4, .55, "S = "+str(S85))
                t1.DrawTextNDC(.4, .45, "B = "+str(B85))
                gPad.Update()
		c_all_85.SaveAs("./plots/SRootB_2016APV_"+name+"_85_AllQQ.png")
		c_all_85.Close()

		c_all_90 = TCanvas()
		c_all_90.cd()
                gPad.SetLogy()
		self.b2_90.SetTitle(name+" S/Root(B) >.90 AllQQ")
		self.b2_90.Draw("hist")
		self.h2_90.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_90.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_90.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_90, name+" Signal")
                l1.AddEntry(self.b2_90, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB90))
                t1.DrawTextNDC(.4, .55, "S = "+str(S90))
                t1.DrawTextNDC(.4, .45, "B = "+str(B90))
                gPad.Update()
		c_all_90.SaveAs("./plots/SRootB_2016APV_"+name+"_90_AllQQ.png")
		c_all_90.Close()
		
		c_all_91 = TCanvas()
		c_all_91.cd()
                gPad.SetLogy()
		self.b2_91.SetTitle(name+" S/Root(B) >.91 AllQQ")
		self.b2_91.Draw("hist")
		self.h2_91.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_91.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_91.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_91, name+" Signal")
                l1.AddEntry(self.b2_91, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB91))
                t1.DrawTextNDC(.4, .55, "S = "+str(S91))
                t1.DrawTextNDC(.4, .45, "B = "+str(B91))
                gPad.Update()
		c_all_91.SaveAs("./plots/SRootB_2016APV_"+name+"_91_AllQQ.png")
		c_all_91.Close()
		
		c_all_92 = TCanvas()
		c_all_92.cd()
                gPad.SetLogy()
		self.b2_92.SetTitle(name+" S/Root(B) >.92 AllQQ")
		self.b2_92.Draw("hist")
		self.h2_92.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_92.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_92.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_92, name+" Signal")
                l1.AddEntry(self.b2_92, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB92))
                t1.DrawTextNDC(.4, .55, "S = "+str(S92))
                t1.DrawTextNDC(.4, .45, "B = "+str(B92))
                gPad.Update()
		c_all_92.SaveAs("./plots/SRootB_2016APV_"+name+"_92_AllQQ.png")
		c_all_92.Close()	
		
		c_all_93 = TCanvas()
		c_all_93.cd()
                gPad.SetLogy()
		self.b2_93.SetTitle(name+" S/Root(B) >.93 AllQQ")
		self.b2_93.Draw("hist")
		self.h2_93.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_93.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_93.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_93, name+" Signal")
                l1.AddEntry(self.b2_93, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB93))
                t1.DrawTextNDC(.4, .55, "S = "+str(S93))
                t1.DrawTextNDC(.4, .45, "B = "+str(B93))
                gPad.Update()
		c_all_93.SaveAs("./plots/SRootB_2016APV_"+name+"_93_AllQQ.png")
		c_all_93.Close()	
		
		c_all_94 = TCanvas()
		c_all_94.cd()
                gPad.SetLogy()
		self.b2_94.SetTitle(name+" S/Root(B) >.94 AllQQ")
		self.b2_94.Draw("hist")
		self.h2_94.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_94.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_94.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_94, name+" Signal")
                l1.AddEntry(self.b2_94, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB94))
                t1.DrawTextNDC(.4, .55, "S = "+str(S94))
                t1.DrawTextNDC(.4, .45, "B = "+str(B94))
                gPad.Update()
		c_all_94.SaveAs("./plots/SRootB_2016APV_"+name+"_94_AllQQ.png")
		c_all_94.Close()	
		
		c_all_95 = TCanvas()
		c_all_95.cd()
                gPad.SetLogy()
		self.b2_95.SetTitle(name+" S/Root(B) >.95 AllQQ")
		self.b2_95.Draw("hist")
		self.h2_95.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_95.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_95.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_95, name+" Signal")
                l1.AddEntry(self.b2_95, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB95))
                t1.DrawTextNDC(.4, .55, "S = "+str(S95))
                t1.DrawTextNDC(.4, .45, "B = "+str(B95))
                gPad.Update()
		c_all_95.SaveAs("./plots/SRootB_2016APV_"+name+"_95_AllQQ.png")
		c_all_95.Close()
		
		c_all_96 = TCanvas()
		c_all_96.cd()
                gPad.SetLogy()
		self.b2_96.SetTitle(name+" S/Root(B) >.96 AllQQ")
		self.b2_96.Draw("hist")
		self.h2_96.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_96.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_96.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_96, name+" Signal")
                l1.AddEntry(self.b2_96, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB96))
                t1.DrawTextNDC(.4, .55, "S = "+str(S96))
                t1.DrawTextNDC(.4, .45, "B = "+str(B96))
                gPad.Update()
		c_all_96.SaveAs("./plots/SRootB_2016APV_"+name+"_96_AllQQ.png")
		c_all_96.Close()
		
		c_all_97 = TCanvas()
		c_all_97.cd()
                gPad.SetLogy()
		self.b2_97.SetTitle(name+" S/Root(B) >.97 AllQQ")
		self.b2_97.Draw("hist")
		self.h2_97.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_97.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_97.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_97, name+" Signal")
                l1.AddEntry(self.b2_97, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB97))
                t1.DrawTextNDC(.4, .55, "S = "+str(S97))
                t1.DrawTextNDC(.4, .45, "B = "+str(B97))
                gPad.Update()
		c_all_97.SaveAs("./plots/SRootB_2016APV_"+name+"_97_AllQQ.png")
		c_all_97.Close()
		
		c_all_98 = TCanvas()
		c_all_98.cd()
                gPad.SetLogy()
		self.b2_98.SetTitle(name+" S/Root(B) >.98 AllQQ")
		self.b2_98.Draw("hist")
		self.h2_98.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_98.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_98.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_98, name+" Signal")
                l1.AddEntry(self.b2_98, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB98))
                t1.DrawTextNDC(.4, .55, "S = "+str(S98))
                t1.DrawTextNDC(.4, .45, "B = "+str(B98))
                gPad.Update()
		c_all_98.SaveAs("./plots/SRootB_2016APV_"+name+"_98_AllQQ.png")
		c_all_98.Close()
		
		c_all_99 = TCanvas()
		c_all_99.cd()
                gPad.SetLogy()
		self.b2_99.SetTitle(name+" S/Root(B) >.99 AllQQ")
		self.b2_99.Draw("hist")
		self.h2_99.Draw("same hist")
		lin1 = TLine(low, 1, low, self.h2_99.GetMaximum())
		lin2 = TLine(high, 1, high, self.h2_99.GetMaximum())
		lin1.SetLineColor(kViolet)
		lin2.SetLineColor(kViolet)
		lin1.SetLineWidth(2)
		lin2.SetLineWidth(2)
		lin1.Draw()
		lin2.Draw()
                l1 = TLegend(.6, .75, .9, .9)
                l1.AddEntry(self.h2_99, name+" Signal")
                l1.AddEntry(self.b2_99, "GJets")
                l1.Draw()
                t1 = TLatex()
                t1.DrawTextNDC(.4, .65, "S/Root(B) = "+str(SRB99))
                t1.DrawTextNDC(.4, .55, "S = "+str(S99))
                t1.DrawTextNDC(.4, .45, "B = "+str(B99))
                gPad.Update()
		c_all_99.SaveAs("./plots/SRootB_2016APV_"+name+"_99_AllQQ.png")
		c_all_99.Close()


		self.SRB = TGraph(11)
#		self.SRB.SetPoint(1,.10,SRB10)
#		self.SRB.SetPoint(2,.15,SRB15)
#		self.SRB.SetPoint(3,.20,SRB20)
#		self.SRB.SetPoint(4,.25,SRB25)
#		self.SRB.SetPoint(5,.30,SRB30)
#		self.SRB.SetPoint(6,.35,SRB35)
#		self.SRB.SetPoint(7,.40,SRB40)
#		self.SRB.SetPoint(8,.45,SRB45)
#		self.SRB.SetPoint(9,.50,SRB50)
#		self.SRB.SetPoint(10,.55,SRB55)
#		self.SRB.SetPoint(11,.60,SRB60)
#		self.SRB.SetPoint(12,.65,SRB65)
#		self.SRB.SetPoint(13,.70,SRB70)
#		self.SRB.SetPoint(14,.75,SRB75)
		self.SRB.SetPoint(0,.80,SRB80)
		self.SRB.SetPoint(1,.85,SRB85)
		self.SRB.SetPoint(2,.90,SRB90)
		self.SRB.SetPoint(3,.91,SRB91)
		self.SRB.SetPoint(4,.92,SRB92)
		self.SRB.SetPoint(5,.93,SRB93)
		self.SRB.SetPoint(6,.94,SRB94)
		self.SRB.SetPoint(7,.95,SRB95)
		self.SRB.SetPoint(8,.96,SRB96)
		self.SRB.SetPoint(9,.97,SRB97)
		self.SRB.SetPoint(10,.98,SRB98)
		self.SRB.SetPoint(11,.99,SRB99)
		self.SRB.SetTitle("S/Root(B) For "+name+" Sample;Xqq/(Xqq+QCD) Score Cut;S/Root(B)")

		c_srb = TCanvas()
		c_srb.cd()
		self.SRB.Draw("AL*")
		ofile.WriteObject(self.SRB, "SRB_all_"+str(t))
		c_srb.SaveAs("./plots/SRB_2016APV_"+name+"_Xqq.png")
		c_srb.Close()
		
		self.SRBALL = TGraph(11)
#		self.SRBALL.SetPoint(1,.10,SRBALL10)
#		self.SRBALL.SetPoint(2,.15,SRBALL15)
#		self.SRBALL.SetPoint(3,.20,SRBALL20)
#		self.SRBALL.SetPoint(4,.25,SRBALL25)
#		self.SRBALL.SetPoint(5,.30,SRBALL30)
#		self.SRBALL.SetPoint(6,.35,SRBALL35)
#		self.SRBALL.SetPoint(7,.40,SRBALL40)
#		self.SRBALL.SetPoint(8,.45,SRBALL45)
#		self.SRBALL.SetPoint(9,.50,SRBALL50)
#		self.SRBALL.SetPoint(10,.55,SRBALL55)
#		self.SRBALL.SetPoint(11,.60,SRBALL60)
#		self.SRBALL.SetPoint(12,.65,SRBALL65)
#		self.SRBALL.SetPoint(13,.70,SRBALL70)
#		self.SRBALL.SetPoint(14,.75,SRBALL75)
		self.SRBALL.SetPoint(0,.80,SRBALL80)
		self.SRBALL.SetPoint(1,.85,SRBALL85)
		self.SRBALL.SetPoint(2,.90,SRBALL90)
		self.SRBALL.SetPoint(3,.91,SRBALL91)
		self.SRBALL.SetPoint(4,.92,SRBALL92)
		self.SRBALL.SetPoint(5,.93,SRBALL93)
		self.SRBALL.SetPoint(6,.94,SRBALL94)
		self.SRBALL.SetPoint(7,.95,SRBALL95)
		self.SRBALL.SetPoint(8,.96,SRBALL96)
		self.SRBALL.SetPoint(9,.97,SRBALL97)
		self.SRBALL.SetPoint(10,.98,SRBALL98)
		self.SRBALL.SetPoint(11,.99,SRBALL99)
		self.SRBALL.SetTitle("S/Root(B) For "+name+" Sample;(Xcc+Xqq+Xbb)/(Xcc+Xqq+QCD+Xbb) Score Cut;S/Root(B)")

		c_srball = TCanvas()
		c_srball.cd()
		self.SRBALL.Draw("AL*")
		ofile.WriteObject(self.SRBALL, "SRBALL_all_"+str(t))
		c_srball.SaveAs("./plots/SRBALL_2016APV_"+name+"_Xqq.png")
		c_srball.Close()
		
		
		ofile.Write()
